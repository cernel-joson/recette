// Mocks generated by Mockito 5.4.6 from annotations
// in recette/test/mocks/mock_job_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:recette/core/jobs/job_model.dart' as _i2;
import 'package:recette/core/jobs/job_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeJob_0 extends _i1.SmartFake implements _i2.Job {
  _FakeJob_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [JobRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockJobRepository extends _i1.Mock implements _i3.JobRepository {
  MockJobRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Job> createJob({
    required String? jobType,
    required String? requestPayload,
    _i2.JobPriority? priority = _i2.JobPriority.normal,
    String? requestFingerprint,
    String? promptText,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createJob, [], {
              #jobType: jobType,
              #requestPayload: requestPayload,
              #priority: priority,
              #requestFingerprint: requestFingerprint,
              #promptText: promptText,
            }),
            returnValue: _i4.Future<_i2.Job>.value(
              _FakeJob_0(
                this,
                Invocation.method(#createJob, [], {
                  #jobType: jobType,
                  #requestPayload: requestPayload,
                  #priority: priority,
                  #requestFingerprint: requestFingerprint,
                  #promptText: promptText,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Job>);

  @override
  _i4.Future<void> updateJobStatus(int? jobId, _i2.JobStatus? status) =>
      (super.noSuchMethod(
            Invocation.method(#updateJobStatus, [jobId, status]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> completeJob(int? jobId, String? responsePayload) =>
      (super.noSuchMethod(
            Invocation.method(#completeJob, [jobId, responsePayload]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i2.Job>> getAllJobs() =>
      (super.noSuchMethod(
            Invocation.method(#getAllJobs, []),
            returnValue: _i4.Future<List<_i2.Job>>.value(<_i2.Job>[]),
          )
          as _i4.Future<List<_i2.Job>>);

  @override
  _i4.Future<_i2.Job?> getJobById(int? jobId) =>
      (super.noSuchMethod(
            Invocation.method(#getJobById, [jobId]),
            returnValue: _i4.Future<_i2.Job?>.value(),
          )
          as _i4.Future<_i2.Job?>);
}
