# .github/workflows/release.yml
name: Release App and Backend

# Allow this workflow to be triggered manually from the GitHub UI
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'The version tag to release (e.g., v0.3.0)'
        required: true

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out the specific version of the code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Explicitly tell the action to check out a tag.
          ref: 'refs/tags/${{ github.event.inputs.version }}'

      # 2. Set up Google Cloud CLI for backend deployment
      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v1'

      # 3. Deploy the Backend (versioned)
      - name: Deploy Backend to Google Cloud
        # Add an 'id' to this step so we can reference its output
        id: deploy_backend
        run: |
          cd backend
          # Deploy the function and capture the URL from the output
          URL=$(gcloud functions deploy recette-api-${{ github.event.inputs.version }} \
            --gen2 \
            --runtime=python311 \
            --region=us-central1 \
            --source=. \
            --entry-point=recipe_analyzer_api \
            --trigger-http \
            --allow-unauthenticated \
            --memory=1Gi \
            --format='value(url)')
          # Set the URL as an output of this step
          echo "url=$URL" >> $GITHUB_OUTPUT

      # 4. Set up Flutter and Java
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.22.x' # Use your Flutter version
          channel: 'stable'
          cache: true

      # 5. Build the Release APK
      - name: Build Release APK
        run: |
          # Create a temporary .env file from the GitHub secret
          echo "${{ secrets.ENV_FILE }}" > .env

          # Now, build the app, defining the API_URL and all Firebase keys from the file
          flutter build apk --release \
            --dart-define=API_URL=${{ steps.deploy_backend.outputs.url }} \
            --dart-define-from-file=.env

      # 6. Upload to Firebase App Distribution
      - name: Upload to Firebase App Distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1
        with:
          appId: '${{ secrets.FIREBASE_APP_ID }}'
          serviceCredentialsFileContent: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}'
          groups: 'testers' # The group you want to release to
          file: build/app/outputs/flutter-apk/app-release.apk